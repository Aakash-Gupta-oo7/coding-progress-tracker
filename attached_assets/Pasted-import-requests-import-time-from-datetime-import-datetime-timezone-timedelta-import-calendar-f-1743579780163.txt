import requests
import time
from datetime import datetime, timezone, timedelta
import calendar
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import json
import pytz # For handling timezones like IST

# --- Configuration ---
# Path to your ChromeDriver executable (if not in PATH)
# CHROMEDRIVER_PATH = '/path/to/your/chromedriver'
CHROMEDRIVER_PATH = None # Set path here if needed

# --- Helper Functions ---

def safe_find_text(driver_or_element, by, value, attribute=None, wait_time=5):
    """Safely find an element and get its text or attribute."""
    try:
        element = WebDriverWait(driver_or_element, wait_time).until(
            EC.presence_of_element_located((by, value))
        )
        # element = driver_or_element.find_element(by, value) # Older way without wait
        if attribute:
            return element.get_attribute(attribute)
        text = element.text.strip()
        if not text:
             text = element.get_attribute('textContent').strip()
        return text
    except (NoSuchElementException, TimeoutException):
        # print(f"Debug: Element not found using {by} = {value}")
        return None
    except Exception as e:
        print(f"Debug: Error finding {by}={value}: {e}")
        return None

def parse_gfg_datetime(date_str, time_str):
    """
    Parses GFG's date and time strings (assuming format like '15 Mar 2024', '08:00 PM IST').
    Converts to UTC datetime object. Returns None on failure.
    """
    if not date_str or not time_str:
        return None

    full_str = f"{date_str} {time_str}"
    # Try parsing common GFG formats
    datetime_obj_naive = None
    tz_str = "IST" # Default assumption, try to extract if possible

    try:
        # Check if timezone is explicitly mentioned
        parts = time_str.split()
        if len(parts) > 2 and parts[-1].isalpha() and len(parts[-1]) <= 4: # Looks like a timezone abbr
             tz_str = parts[-1]
             time_part = " ".join(parts[:-1]) # e.g. "08:00 PM"
        else:
             time_part = time_str

        # Handle potential variations in date format if needed
        datetime_format = f"%d %b %Y {time_part}" # Construct format dynamically? Risky.
        # Let's try common formats directly
        possible_formats = [
            "%d %b %Y %I:%M %p", # 15 Mar 2024 08:00 PM
            "%d %b %Y %H:%M",    # 15 Mar 2024 20:00 (if 24hr format used)
            "%d %B %Y %I:%M %p", # 15 March 2024 08:00 PM
            "%d %B %Y %H:%M",    # 15 March 2024 20:00
        ]

        cleaned_str = date_str + " " + time_part # Combine date and parsed time part

        for fmt in possible_formats:
            try:
                datetime_obj_naive = datetime.strptime(cleaned_str, fmt)
                break # Success
            except ValueError:
                continue # Try next format

        if not datetime_obj_naive:
            print(f"Warning: Could not parse GFG datetime string: {full_str}")
            return None

        # --- Timezone Handling ---
        try:
            # Use pytz for robust timezone handling
            local_tz = pytz.timezone(tz_str if tz_str != "UTC" else "Etc/UTC") # Handle common cases like IST, PST etc.
            # Note: pytz might not know all abbreviations. May need mapping for less common ones.
            # For IST specifically:
            if tz_str.upper() == "IST":
                 local_tz = pytz.timezone("Asia/Kolkata")

            local_dt = local_tz.localize(datetime_obj_naive)
            utc_dt = local_dt.astimezone(pytz.utc)
            return utc_dt
        except pytz.UnknownTimeZoneError:
             print(f"Warning: Unknown timezone '{tz_str}' encountered for GFG. Assuming IST.")
             # Fallback to IST if unknown, or handle differently
             local_tz = pytz.timezone("Asia/Kolkata")
             local_dt = local_tz.localize(datetime_obj_naive)
             utc_dt = local_dt.astimezone(pytz.utc)
             return utc_dt
        except Exception as tz_err:
            print(f"Error during timezone conversion for {full_str}: {tz_err}. Falling back to naive UTC assumption.")
            # Less ideal fallback: assume the parsed time was already UTC or local system time
            # For simplicity here, we'll assume it might be local and try converting, but UTC is better
            return datetime_obj_naive.replace(tzinfo=timezone.utc) # Risky assumption


    except Exception as e:
        print(f"Error parsing GFG datetime string '{full_str}': {e}")
        return None


# --- Platform Fetching Functions ---

def fetch_codeforces_contests():
    """Fetches upcoming contests from Codeforces API."""
    print("Fetching Codeforces contests...")
    contests = []
    try:
        # gym=false filters out unofficial training contests
        response = requests.get("https://codeforces.com/api/contest.list?gym=false", timeout=10)
        response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)
        data = response.json()

        if data.get("status") == "OK":
            for contest in data.get("result", []):
                if contest.get("phase") == "BEFORE": # Only upcoming contests
                    start_time_unix = contest.get("startTimeSeconds")
                    duration_seconds = contest.get("durationSeconds")
                    contest_id = contest.get("id")
                    name = contest.get("name")

                    if start_time_unix and name and contest_id:
                        start_time_utc = datetime.fromtimestamp(start_time_unix, tz=timezone.utc)
                        contests.append({
                            "platform": "Codeforces",
                            "name": name,
                            "url": f"https://codeforces.com/contests/{contest_id}",
                            "start_time_unix": start_time_unix,
                            "start_time_iso": start_time_utc.isoformat().replace('+00:00', 'Z'),
                            "duration_seconds": duration_seconds if duration_seconds else 0
                        })
            print(f"Found {len(contests)} upcoming Codeforces contests.")
        else:
            print(f"Codeforces API request failed: {data.get('comment', 'Unknown error')}")

    except requests.exceptions.RequestException as e:
        print(f"Error fetching Codeforces contests: {e}")
    except Exception as e:
        print(f"An unexpected error occurred fetching Codeforces contests: {e}")
    return contests

def fetch_leetcode_contests():
    """Fetches upcoming contests from LeetCode GraphQL API."""
    print("Fetching LeetCode contests...")
    contests = []
    url = "https://leetcode.com/graphql"
    query = """
    query upcomingContests {
      upcomingContests {
        title
        titleSlug
        startTime
        duration
      }
    }
    """
    try:
        response = requests.post(url, json={'query': query}, timeout=10)
        response.raise_for_status()
        data = response.json()

        upcoming = data.get("data", {}).get("upcomingContests")
        if upcoming:
            for contest in upcoming:
                start_time_unix = contest.get("startTime")
                duration_seconds = contest.get("duration")
                title = contest.get("title")
                title_slug = contest.get("titleSlug")

                if start_time_unix and title and title_slug:
                    start_time_utc = datetime.fromtimestamp(start_time_unix, tz=timezone.utc)
                    contests.append({
                        "platform": "LeetCode",
                        "name": title,
                        "url": f"https://leetcode.com/contest/{title_slug}/",
                        "start_time_unix": start_time_unix,
                        "start_time_iso": start_time_utc.isoformat().replace('+00:00', 'Z'),
                        "duration_seconds": duration_seconds if duration_seconds else 0
                    })
            print(f"Found {len(contests)} upcoming LeetCode contests.")
        else:
            print("No upcoming contests found or error in LeetCode GraphQL response.")

    except requests.exceptions.RequestException as e:
        print(f"Error fetching LeetCode contests: {e}")
    except Exception as e:
        print(f"An unexpected error occurred fetching LeetCode contests: {e}")
    return contests

def fetch_gfg_contests():
    """Fetches upcoming contests from GFG Practice Contests page using Selenium."""
    print("Fetching GeeksforGeeks contests (using Selenium)...")
    contests = []
    profile_url = "https://practice.geeksforgeeks.org/contests"

    # --- Selenium Setup ---
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--log-level=3") # Suppress console noise

    driver = None
    try:
        if CHROMEDRIVER_PATH:
            service = Service(CHROMEDRIVER_PATH)
            driver = webdriver.Chrome(service=service, options=chrome_options)
        else:
            # Assumes chromedriver is in PATH
            driver = webdriver.Chrome(options=chrome_options)

        print(f"Navigating to {profile_url}...")
        driver.get(profile_url)
        time.sleep(3) # Initial wait

        print("Waiting for contest list to potentially load...")
        # Wait for a container that holds contest cards (adjust selector as needed)
        WebDriverWait(driver, 15).until(
             EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'contest-card')] | //div[contains(@class, 'contest_card')] | //a[contains(@class,'contest-card')]")) # Try common patterns
        )
        print("Contest list container found.")

        # Find all contest card elements
        # Adjust the selector based on GFG's current structure
        contest_cards = driver.find_elements(By.XPATH, "//div[contains(@class, 'contest-card')] | //div[contains(@class, 'contest_card')] | //a[contains(@class,'contest-card')]")
        print(f"Found {len(contest_cards)} potential contest card elements.")

        upcoming_found = 0
        for card in contest_cards:
             # Check if it's an upcoming contest - look for "Upcoming" text or specific structure
             status_text = safe_find_text(card, By.XPATH, ".//div[contains(@class,'status')] | .//span[contains(@class,'status')]", wait_time=1) # Example selectors
             if status_text and "upcoming" not in status_text.lower() and "register" not in status_text.lower():
                  # print("Skipping non-upcoming contest card.") # Debug
                  continue # Skip if clearly not upcoming

             name = safe_find_text(card, By.XPATH, ".//div[contains(@class,'contest-name')] | .//h4 | .//div[contains(@class,'card-title')]", wait_time=1)
             url = safe_find_text(card, By.TAG_NAME, "a", attribute='href', wait_time=1)
             if not url: # If card itself is not the link, find link inside
                 url = safe_find_text(card, By.XPATH, ".//a", attribute='href', wait_time=1)


             # Date and Time parsing is crucial and fragile
             start_date_str = safe_find_text(card, By.XPATH, ".//span[contains(@class,'date')] | .//div[contains(text(),'Starts on:')]/span", wait_time=1) # Needs specific selector
             start_time_str = safe_find_text(card, By.XPATH, ".//span[contains(@class,'time')] | .//div[contains(text(),'Starts at:')]/span", wait_time=1) # Needs specific selector

             # Fallback: Sometimes date and time are combined
             if not start_date_str or not start_time_str:
                 full_datetime_str = safe_find_text(card, By.XPATH, ".//div[contains(@class,'datetime')] | .//span[contains(text(), 'Starts on') or contains(text(),'Start Date')] | .//div[contains(text(),'Start Time')]", wait_time=1)
                 # Attempt to split combined string if necessary (very brittle)
                 # This part needs careful inspection of the actual GFG page source
                 if full_datetime_str:
                     # Example split logic (highly dependent on GFG format):
                     try:
                          # Look for common patterns like "15 Mar 2024, 08:00 PM IST"
                          parts = full_datetime_str.replace("Starts on:","").replace("Start Date:","").strip().split(',')
                          if len(parts) >= 2:
                              start_date_str = parts[0].strip()
                              start_time_str = parts[1].strip()
                          # Add more splitting logic if needed for different formats
                     except:
                          print(f"Could not split GFG datetime string: {full_datetime_str}")


             start_time_utc = parse_gfg_datetime(start_date_str, start_time_str)

             # Duration is often not listed, defaulting to 0 or a standard guess
             duration_seconds = 7200 # Default guess: 2 hours

             if name and url and start_time_utc:
                 upcoming_found += 1
                 contests.append({
                     "platform": "GeeksforGeeks",
                     "name": name,
                     "url": url if url.startswith('http') else f"https://practice.geeksforgeeks.org{url}", # Ensure absolute URL
                     "start_time_unix": int(start_time_utc.timestamp()),
                     "start_time_iso": start_time_utc.isoformat().replace('+00:00', 'Z'),
                     "duration_seconds": duration_seconds
                 })
             # else: # Debugging info
                  # print(f"Debug: Failed to extract full info for a GFG card. Name: {name}, URL: {url}, StartUTC: {start_time_utc}")


        print(f"Found {upcoming_found} upcoming GeeksforGeeks contests via scraping.")

    except Exception as e:
        print(f"An error occurred during GFG scraping: {e}")

    finally:
        if driver:
            print("Closing WebDriver for GFG.")
            driver.quit()
    return contests

# --- Main Function ---

def get_contests_this_month():
    """Fetches all upcoming contests and filters for the current month."""
    all_contests = []
    all_contests.extend(fetch_codeforces_contests())
    all_contests.extend(fetch_leetcode_contests())
    all_contests.extend(fetch_gfg_contests()) # Selenium scraping

    if not all_contests:
        print("No upcoming contests found from any platform.")
        return []

    # --- Filter for Current Month (UTC) ---
    now_utc = datetime.now(timezone.utc)
    current_year = now_utc.year
    current_month = now_utc.month

    # Start of current month
    month_start_dt = datetime(current_year, current_month, 1, 0, 0, 0, tzinfo=timezone.utc)
    month_start_unix = int(month_start_dt.timestamp())

    # Start of next month (handles year wrap-around)
    next_month = current_month + 1
    next_year = current_year
    if next_month > 12:
        next_month = 1
        next_year += 1
    month_end_dt = datetime(next_year, next_month, 1, 0, 0, 0, tzinfo=timezone.utc)
    month_end_unix = int(month_end_dt.timestamp())

    print(f"\nFiltering contests between {month_start_dt.isoformat()} and {month_end_dt.isoformat()}")

    contests_this_month = []
    for contest in all_contests:
        if month_start_unix <= contest["start_time_unix"] < month_end_unix:
            contests_this_month.append(contest)

    # Sort by start time
    contests_this_month.sort(key=lambda x: x["start_time_unix"])

    print(f"Found {len(contests_this_month)} contests scheduled for this month.")
    return contests_this_month

# --- Execution ---

if __name__ == "__main__":
    print("Starting contest fetching process...")
    monthly_contests = get_contests_this_month()

    print("\n--- Contests This Month ---")
    if monthly_contests:
        for contest in monthly_contests:
            # Example output formatting
            start_dt = datetime.fromisoformat(contest['start_time_iso'].replace('Z', '+00:00'))
            duration_h = contest['duration_seconds'] // 3600
            duration_m = (contest['duration_seconds'] % 3600) // 60
            print(f"Platform: {contest['platform']}")
            print(f"  Name: {contest['name']}")
            print(f"  URL: {contest['url']}")
            print(f"  Starts (UTC): {start_dt.strftime('%Y-%m-%d %H:%M:%S %Z')}")
            print(f"  Duration: {duration_h}h {duration_m}m ({contest['duration_seconds']}s)")
            print("-" * 20)
    else:
        print("No contests found for the current month.")

    print("\nScript finished.")
Use code with caution.
Python
Explanation and Notes:

Dependencies: Make sure requests, selenium, and pytz are installed.

ChromeDriver: Update CHROMEDRIVER_PATH or ensure chromedriver is in your PATH.

GFG Scraping (Fragile): The fetch_gfg_contests function uses Selenium. The XPaths (//div[contains(@class, 'contest-card')], etc.) are guesses based on common structures and will likely need updating based on the current GFG website HTML. Inspect the GFG contest page source carefully to find the correct selectors for contest cards, name, URL, status, date, and time elements.

GFG Date/Time Parsing: The parse_gfg_datetime function attempts to handle formats like "15 Mar 2024" and "08:00 PM IST". It uses pytz to convert the assumed local time (like IST) to UTC. This is complex because GFG might change formats or not specify the timezone clearly. You might need to refine this parser significantly based on observed data.

Timezones: All final times are stored in UTC (Unix timestamp and ISO 8601 string ending in 'Z') for easy comparison and use in calendar applications.

Filtering Logic: get_contests_this_month calculates the Unix timestamp range for the current calendar month in UTC and filters the combined list.

Output: The if __name__ == "__main__": block demonstrates how to call the function and print the results in a readable format. This list of dictionaries (monthly_contests) is ready to be used by your calendar generation logic.

